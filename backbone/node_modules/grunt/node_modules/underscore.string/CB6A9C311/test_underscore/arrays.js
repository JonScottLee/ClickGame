$(document).ready(function() {

  module("Arrays");

  test("arrays: first", function() {
    equals(_.first([1,2,3]), 1, 'can pull out the first element of an array');
    equals(_([1, 2, 3]).first(), 1, 'can perform OO-style "first()"');
    equals(_.first([1,2,3], 0).join(', '), "", 'can pass an index to first');
    equals(_.first([1,2,3], 2).join(', '), '1, 2', 'can pass an index to first');
    equals(_.first([1,2,3], 5).join(', '), '1, 2, 3', 'can pass an index to first');
    var result = (function(){ return _.first(arguments); })(4, 3, 2, 1);
    equals(result, 4, 'works on an arguments object.');
    result = _.map([[1,2,3],[1,2,3]], _.first);
    equals(result.join(','), '1,1', 'works well with _.map');
  });

  test("arrays: rest", function() {
    var numbers = [1, 2, 3, 4];
    equals(_.rest(numbers).join(", "), "2, 3, 4", 'working rest()');
    equals(_.rest(numbers, 0).join(", "), "1, 2, 3, 4", 'working rest(0)');
    equals(_.rest(numbers, 2).join(', '), '3, 4', 'rest can take an index');
    var result = (function(){ return _(arguments).tail(); })(1, 2, 3, 4);
    equals(result.join(', '), '2, 3, 4', 'aliased as tail and works on arguments object');
    result = _.map([[1,2,3],[1,2,3]], _.rest);
    equals(_.flatten(result).join(','), '2,3,2,3', 'works well with _.map');
  });

  test("arrays: initial", function() {
    equals(_.initial([1,2,3,4,5]).join(", "), "1, 2, 3, 4", 'working initial()');
    equals(_.initial([1,2,3,4],2).join(", "), "1, 2", 'initial can take an index');
    var result = (function(){ return _(arguments).initial(); })(1, 2, 3, 4);
    equals(result.join(", "), "1, 2, 3", 'initial works on arguments object');
    result = _.map([[1,2,3],[1,2,3]], _.initial);
    equals(_.flatten(result).join(','), '1,2,1,2', 'initial works with _.map');
  });

  test("arrays: last", function() {
    equals(_.last([1,2,3]), 3, 'can pull out the last element of an array');
    equals(_.last([1,2,3], 0).join(', '), "", 'can pass an index to last');
    equals(_.last([1,2,3], 2).join(', '), '2, 3', 'can pass an index to last');
    equals(_.last([1,2,3], 5).join(', '), '1, 2, 3', 'can pass an index to last');
    var result = (function(){ return _(arguments).last(); })(1, 2, 3, 4);
    equals(result, 4, 'works on an arguments object');
    result = _.map([[1,2,3],[1,2,3]], _.last);
    equals(result.join(','), '3,3', 'works well with _.map');
  });

  test("arrays: compact", function() {
    equals(_.compact([0, 1, false, 2, false, 3]).length, 3, 'can trim out all falsy values');
    var result = (function(){ return _(arguments).compact().length; })(0, 1, false, 2, false, 3);
    equals(result, 3, 'works on an arguments object');
  });

  test("arrays: flatten", function() {
    if (window.JSON) {
      var list = [1, [2], [3, [[[4]]]]];
      equals(JSON.stringify(_.flatten(list)), '[1,2,3,4]', 'can flatten nested arrays');
      equals(JSON.stringify(_.flatten(list, true)), '[1,2,3,[[[4]]]]', 'can shallowly flatten nested arrays');
      var result = (function(){ return _.flatten(arguments); })(1, [2], [3, [[[4]]]]);
      equals(JSON.stringify(result), '[1,2,3,4]', 'works on an arguments object');
    }
  });

  test("arrays: without", function() {
    var list = [1, 2, 1, 0, 3, 1, 4];
    equals(_.without(list, 0, 1).join(', '), '2, 3, 4', 'can remove all instances of an object');
    var result = (function(){ return _.without(arguments, 0, 1); })(1, 2, 1, 0, 3, 1, 4);
    equals(result.join(', '), '2, 3, 4', 'works on an arguments object');

    var list = [{one : 1}, {two : 2}];
    ok(_.without(list, {one : 1}).length == 2, 'uses real object identity for comparisons.');
    ok(_.without(list, list[0]).length == 1, 'ditto.');
  });

  test("arrays: uniq", function() {
    var list = [1, 2, 1, 3, 1, 4];
    equals(_.uniq(list).join(', '), '1, 2, 3, 4', 'can find the unique values of an unsorted array');

    var list = [1, 1, 1, 2, 2, 3];
    equals(_.uniq(list, true).join(', '), '1, 2, 3', 'can find the unique values of a sorted array faster');

    var list = [{name:'moe'}, {name:'curly'}, {name:'larry'}, {name:'curly'}];
    var iterator = function(value) { return value.name; };
    equals(_.map(_.uniq(list, false, iterator), iterator).join(', '), 'moe, curly, larry', 'can find the unique values of an array using a custom iterator');

    var iterator = function(value) { return value +1; };
    var list = [1, 2, 2, 3, 4, 4];
    equals(_.uniq(list, true, iterator).join(', '), '1, 2, 3, 4', 'iterator works with sorted array');

    var result = (function(){ return _.uniq(arguments); })(1, 2, 1, 3, 1, 4);
    equals(result.join(', '), '1, 2, 3, 4', 'works on an arguments object');
  });

  test("arrays: intersection", function() {
    var stooges = ['moe', 'curly', 'larry'], leaders = ['moe', 'groucho'];
    equals(_.intersection(stooges, leaders).join(''), 'moe', 'can take the set intersection of two arrays');
    equals(_(stooges).intersection(leaders).join(''), 'moe', 'can perform an OO-style intersection');
    var result = (function(){ return _.intersection(arguments, leaders); })('moe', 'curly', 'larry');
    equals(result.join(''), 'moe', 'works on an arguments object');
  });

  test("arrays: union", function() {
    var result = _.union([1, 2, 3], [2, 30, 1], [1, 40]);
    equals(result.join(' '), '1 2 3 30 40', 'takes the union of a list of arrays');

    var result = _.union([1, 2, 3], [2, 30, 1], [1, 40, [1]]);
    equals(result.join(' '), '1 2 3 30 40 1', 'takes the union of a list of nested arrays');
  });

  test("arrays: difference", function() {
    var result = _.difference([1, 2, 3], [2, 30, 40]);
    equals(result.join(' '), '1 3', 'takes the difference of two arrays');

    var result = _.difference([1, 2, 3, 4], [2, 30, 40], [1, 11, 111]);
    equals(result.join(' '), '3 4', 'takes the difference of three arrays');
  });

  test('arrays: zip', function() {
    var names = ['moe', 'larry', 'curly'], ages = [30, 40, 50], leaders = [true];
    var stooges = _.zip(names, ages, leaders);
    equals(String(stooges), 'moe,30,true,larry,40,,curly,50,', 'zipped together arrays of different lengths');
  });

  test("arrays: indexOf", function() {
    var numbers = [1, 2, 3];
    numbers.indexOf = null;
    equals(_.indexOf(numbers, 2), 1, 'can compute indexOf, even without the native function');
    var result = (function(){ return _.indexOf(arguments, 2); })(1, 2, 3);
    equals(result, 1, 'works on an arguments object');
    equals(_.indexOf(null, 2), -1, 'handles nulls properly');

    var numbers = [10, 20, 30, 40, 50], num = 35;
    var index = _.indexOf(numbers, num, true);
    equals(index, -1, '35 is not in the list');

    numbers = [10, 20, 30, 40, 50]; num = 40;
    index = _.indexOf(numbers, num, true);
    equals(index, 3, '40 is in the list');

    numbers = [1, 40, 40, 40, 40, 40, 40, 40, 50, 60, 70]; num = 40;
    index = _.indexOf(numbers, num, true);
    equals(index, 1, '40 is in the list');
  });

  test("arrays: lastIndexOf", function() {
    var numbers = [1, 0, 1, 0, 0, 1, 0, 0, 0];
    numbers.lastIndexOf = null;
    equals(_.lastIndexOf(numbers, 1), 5, 'can compute lastIndexOf, even without the native function');
    equals(_.lastIndexOf(numbers, 0), 8, 'lastIndexOf the other element');
    var result = (function(){ return _.lastIndexOf(arguments, 1); })(1, 0, 1, 0, 0, 1, 0, 0, 0);
    equals(result, 5, 'works on an arguments object');
    equals(_.indexOf(null, 2), -1, 'handles nulls properly');
  });

  test("arrays: range", function() {
    equals(_.range(0).join(''), '', 'range with 0 as a first argument generates an empty array');
    equals(_.range(4).join(' '), '0 1 2 3', 'range with a single positive argument generates an array of elements 0,1,2,...,n-1');
    equals(_.range(5, 8).join(' '), '5 6 7', 'range with two arguments a &amp; b, a&lt;b generates an array of elements a,a+1,a+2,...,b-2,b-1');
    equals(_.range(8, 5).join(''), '', 'range with two arguments a &amp; b, b&lt;a generates an empty array');
    equals(_.range(3, 10, 3).join(' '), '3 6 9', 'range with three arguments a &amp; b &amp; c, c &lt; b-a, a &lt; b generates an array of elements a,a+c,a+2c,...,b - (multiplier of a) &lt; c');
    equals(_.range(3, 10, 15).join(''), '3', 'range with three arguments a &amp; b &amp; c, c &gt; b-a, a &lt; b generates an array with a single element, equal to a');
    equals(_.range(12, 7, -2).join(' '), '12 10 8', 'range with three arguments a &amp; b &amp; c, a &gt; b, c &lt; 0 generates an array of elements a,a-c,a-2c and ends with the number not less than b');
    equals(_.range(0, -10, -1).join(' '), '0 -1 -2 -3 -4 -5 -6 -7 -8 -9', 'final example in the Python docs');
  });

});
1%dﬁ¯ 5‘éÙTr“L$nƒÃ#EæGßÂWôÆ˚Ø‘Ÿ1#∫3±èæ¢<G+≈®CJàÈè=GIAÒ8]ù„äV=√æ≠á0…Á§çn1pﬂÂGÀv)î˚†∑ù⁄(î!ŒLDn™ø˙•Èë∂}ß•(Úéc—‚8Ò∞b∞9F–ÍÎÏe‘£¯YüSıF˘÷îW˘>}‚”Ë@7SÃ8l	zòıÄ…–›<i—º§ıü„˛ƒÁ©F6IlÁ≤-∫ñ∑¥£äï‹“9/F¿>«Q&MH,‰ëuÓ—¸y!cñ[zΩ&{LÖ®0;ÃæÈ)î(YµG±åHﬂ÷OE?)ƒ@8ótNëıká
E&ÌiJ≈˜5b6µUÖ¢∆ºÂ¿K&áÏÅb1OaägEET≥R#ŒâáZêqüèºÁ	,í5T	ﬁ—Ω!√`÷úêÏ‡MíëÑ–iÏeKåÉU2÷:ˆà»˘{ì®]¥¨7ƒR^z£˝ÍÜàø™ˆd'Å´ç‘Êx¿2ëºh¯Æ“,ï YòÈ˜iÔŒ
‘:óƒ|à>Èb©≈P5‘7˙D®–N_∏˛.:≠ÿ€¸	›B∞§WSŸ√]â¥ñ:Ö‹DVçÑ´‡#B)T$è¢¡y÷
|≥Lã$¯»_Tpõ˚í0Ï{õaî¬Pˇ£œé¬ï!»ÁÌŸj
41gÅn≠˘E‹ä'5πﬁ»ï«.†ıó2Tˆy$ÂX¿ù¨‰=ú1•Äz¨¿»ò˝ïæ1§-üÓ#Ÿ%>ãék	≠òt£)ÄVπÖbqÛE° ?¿NÚæ(‡_› gœË’ÓH
Gïä’÷≥U)Ë5|}j6\ÈlíﬂÖæA¬ìçdS—Î=ÜﬁrÎozi<"©§æø[îÁRƒ~I)¡µÔíJ:*tëÃË–T8‰ÿòÏÓÛ_7Ãx ôLö7>náÕóxŒzÕE–ÈYÌÌ¸¯N«ëƒÚÁ˝)\jß›9ìÏ ˝üKî&±Ö)ÒØ±‰)ÓK?yäg„/Ü4¶´ÀÀ¥QcH#sXäá
:eúyÑ∆Õ—µ<C∏®µÿX’J∑cs*B±vÙLäÚÎÙv´˚◊=«œÄ∆‰b‰7¢gR6≈7ã÷åŸÈ˚√)\¨ágœö9êy˜y4·ÛYô*UgP÷GÔ	F€j}#√Ó4≥[5,uœ‹9—HÍﬁ˝˝P¯H(√˚-{Azç⁄¢F0∆Z|¨	£yig˜»uÒŒx®iSrˇÅ÷”ÈX¡Y3^B=ì)OD¡éƒ¯û&›ΩgzbŒÔ:®gulE-KŒ»¬„º˛sä]ô['å<01ıEù˙ Ô¬EfexµT⁄	€†‚¥¿¨s“è€ˆÎ≈ax]ÁÑ˘v¯¯(·]Í©ƒaÙ^ÃL»∆åﬁ]68‰t3ã€œƒ;\C©Ø[˘≤≥…UhLS5≈%1ÀCZ˜øØ÷‰Y9°«qÛ%sYéøIvá,».7PZÛS’Á\:€≈§ó	„mK1Üˇ -é:F+ïèM™6ŒHëI©drhGN&≤‹j_oH˙3î7ï2ﬂ…DëròéÁ@Àjì~‚8≤ùVáóBUæv •NP5<‰±¶ÂÎwô|••^±˜ﬁµö	q/B˘ﬁHÒù{-Å‹,•ÙŒX¥i›,ü`“@~á∞2Àf¸f›ﬁ„∏TÎîÅìÜ˝A1dP µoQ'o$<˙∏ºLáØê_Î∏ ·U∆rIÚ'ˇp∆∑!∑Ω‡∂ÕRÌaµªÄãÈsé¡¯|ƒπíüd~© 48E÷M◊à≥f`‘fÕ∫gπÜ‡'EjJ¬Cm‡¯ò¯–˘ ≠3›π r∆|Ÿ»?ïP≥∞]‘pâÈõâppÙ5HjßõØ>cËÍkÿÁâfÄ rÒgC‚ÒP ∫r⁄µÕ\X⁄ÅØáøg∆úâPÇﬁ_=pe˝jîÖï ∂ßÿhùÕBıö.ç–aw»‡∂âú•H_cw∏w™ó.Ö§	Ä]ímü+ØuP…áaÛè˛g¬í…ÃÜèWYcÿ3OÒCÈàãlE˚çB7Ïπ‘ÍˆK¬ﬁcâ}Õ˘o(∂≥ﬁ–ˆŸ∞&˝ûç∂⁄éı«™∞HÀü»N‘ôµâÕ‘üsR°fÍèÿJÉ?„Ë>/˘¨–ÜQ◊´i÷ÜmWv~éj˜@îOöG9‹e@˘d∏CxXU—À*{µˆ∞të§ÃäL{ª?uu˛x…+∫…
zzgú~É∆¨e,”3q±|÷ø⁄5¨2”ô	6∑ﬂg◊os1ìH"~˙µò›y‚Ñöhß^mcÇ6^Ô∏Îÿ•TÉ?ËÂ¯€˜Ín¨¿úp˝⁄È•∞•)
ãYΩ*wVµû‚‚c∑›Oﬁzvò&¸1@˘]ﬂˆÊT®Í∂ëΩ»Ÿ„ΩbTßÄ^L¡˝ö‰È"wò%H´Ê;Öﬁ3·e+#úBÂæœ£´ !,§≥	r=òÀ#ß’=∂õø∂›Jóá¸Ô 0ƒ¿ùlN¿À¿∞ıõÏ&kƒüñ¬FvÃ~˙Óq˚—ó•2ï∞o¿ﬁ‡º…∏îF£Ü˙Â¡œﬁÊóV…üäëíèÒÒÁdÛ™›´jPz4«ı≥7Wkî/ø!\Êø∆A£JB∏?ﬂ¶`–ÃÓLCz_(hÎ¥À{mÊõΩ‹¸ßÔˆÌ"§√ñNéÁ˜ç∑…[AÁã>9≠Ω”DfÚ⁄4∏±ÈL”¢6ï4-‹R⁄Í≈ãó¢9±/î≠ÖïWÏXR~∫v≤ó˜—“Î∆éƒì àC›“Ù+˚GwC@›%&q†sçe“‚†›•∑∏•ñË_®ZŸLèêkå]™ÏòÖ¨áÙµz00ÿ»SÊˇtÕ÷›“S!c ©⁄BpÇqi/¡]§+¿*ßìCø,^ﬂ◊v˙ cSÊ≤SΩG\;√ï;πGLßiW-g‘îF∞*Ry0Ê‡3·ÿ¡ﬁá|;O}Ç›x«Kº¸K«©ËèåÅ∞∫;πºcë‡Ô©’πh•&êºÚüSw…g≤±µﬁG˝	Â∫
≥låb¥j˚f¬|}·±´ﬂ¿}NªïÛπﬁó4÷Ø=yg@d∆º¿‚Ïß∆–sô†óE$˙H˙o¢‡ﬂßP∆ «G™ nÂ¿Ú¯4˘Èƒ*%QÏπ‰˝Uö∑ÌµötQ:Büttﬂ˘¥W@bÛΩÜ:î8Ü7›YÂØÑ§¡ VUD”cSe`Ìlë?–2∞–œâì÷ÁXÕ_¥ÿì‚˜Vû,<’n√ò¬¶.•PÿR≤úµ…rÆΩü%súÚ;≥ß8í«sè'^‘~¯µw*cß;≠Ÿ¶KÿÇır—PœÈ$eDˆÒ[bòTßß¥‘öΩ≠8≠H¨ŒOé?·x;ÌÏMõR˜	˝Ø=∑^{?ÚuØXº›\?πˇêµ4Su(’≠A;·kÄñ¸0#ŸãmCPL€/.ênÿ2∏ùôÿ€MJŸÕöü˚˚À˘ç~…„MÇ∞UoµŒ4F¿˚<¿ºìWäÛ´KFü·?»π_U!ê[;¨˛«kêƒüBbÆjÑ∑¬ØO¥Hˇ„»√Ÿe„	`K$âìrßI9u®≥â5ò:OëÅ$¡Dm¢çv3íÑùˇ 2.˚L°<AòÉ§˚©
’ü%ª¨Íáç{djÃz~k¨LnœWÈè-8â2<¬∆Úé≠|‡ë÷>EvCJ∞Tƒ≠ì*§k¿ã‚/]3,}6 Q4#AÈ`%us;É∫MÛÖO>±Èî|$Iﬁù¡q≥•àVÕæÈ§BØD˝ä–˝AËˇ›d⁄´ r”‰v›!ìØHÉ«[ËT}zú´|ˆ!xpÔÆóZ['„éhã2Ü‚‘≠ùlÑ*ÖBπîÙ”@kw¸ih,º*.Ωú˙F	+î∆x≈Èa›24KZÍíÀÜ[≠ñy[xb≠⁄0Eê%óúqÓMÑ˙k‹„Ê	uïümwãtYàÏâó·EÇ,õGOf∫díoÃìœ’!a˛Çé$ÿë’JVŒY‚OTvãÆcw)yÖ’±¢i◊b3ﬁ:ıdj0ë®èÖÈ£u„∫
:ªﬂ„Ù™¡Ä+ œ™Î™ú¿pIó≈√EÃ∫ICrF/Ø˙nòc:Uâ2Hˇdﬁ“°Ñxb∂¢Ó‚ç˚ïØ‰,rö¥" íágÑÈ/ ^ÄÉÜÈîÎò˘ÒÑ`J‹gSßà	“ﬁOô‹$IîÕ_Q}8F?¬ae
cµ(7˝˚Á∆,ÊâXJ”≤@”›z?‡öúe_/∂¯W≥t/˜
§√oË?Y£êót/2”≠Ÿ°U>@|≈ıgªNﬁ4éÊ‚Œ≈fÆ;Ä
˛¡›1JÌ>o∏X¯ﬂ±cÈû¡gÎ@(Ê‰ŸYÒC˚DJÆôÓ-–“wÅ+Á.¨s>ÃdÈsøÈ'‘–pﬁ&lF;o∞S|ÛK˛Øoñ—±Ù%=ÎÓÈ≠ë–™¶ìŒ˘åw=~ÑΩÏÅ≤◊1\®∫zÂ≈¢•µJ¨\©ÿƒ˛≠¿ÿ?ë/+íFÃ∑†ZòËÇJT	¿êx∫M
““ïß‡'>¢‹xÛ>a≥ˇ«Å¢W¸;*©Ehöï Èú+•%∂U—¯M»¸;ÙE”QÊ2Gj ü‡ oª›¸˝›Vùπ¡ç3ré4‰ã"ÁZÃ"ÜÏ—¥B’,ÁÍ{